#!/bin/sh
# =================================================================
# Detect whether running in a container and set appropriate options
# for limiting Java VM resources
#
# Usage: JAVA_OPTIONS="$(java-default-options.sh)"

# Env Vars evaluated:

# JAVA_OPTIONS: Checked for already set options
# JAVA_NEW_MEM_RATIO: new/old generation ratio
# JAVA_MAX_MEM_RATIO: Ratio use to calculate a default maximum Memory, in percent.
#                     E.g. the default value "50" implies that 50% of the Memory
#                     given to the container is used as the maximum heap memory with
#                     '-Xmx'. It is a heuristic and should be better backed up with real
#                     experiments and measurements.
#                     For a good overviews what tuning options are available -->
#                             https://youtu.be/Vt4G-pHXfs4
#                             https://www.youtube.com/watch?v=w1rZOY5gbvk
#                             https://vimeo.com/album/4133413/video/181900266
# Also note that heap is only a small portion of the memory used by a JVM. There are lot
# of other memory areas (metadata, thread, code cache, ...) which addes to the overall
# size. There is no easy solution for this, 50% seems to be are reasonable compromise.
# However, when your container gets killed because of an OOM, then you should tune the absolute values.


# Check for new/old ratio and if not disabled, produce generation tuning settings
generation_tuning() {
  # Check whether -Xmx is already given in JAVA_OPTIONS. Then we don't do anything here
  if echo "${JAVA_OPTIONS}" | grep -q -- "-XX:MaxNewSize"; then
    return
  fi
  # Check if explicitly disabled
  if [ "x$JAVA_NEW_MEM_RATIO" = "x0" ]; then
    return
  fi

  local new_ratio=${JAVA_NEW_MEM_RATIO:-0.66}
  local mx="$1"
  if [ -z "$mx" ]; then return; fi
  local max_new=`echo "$mx $new_ratio" | awk '{ printf "%d\n", $1*$2 }'`
  echo "-XX:MaxNewSize=${max_new}m -XX:SurvivorRatio=10 -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=90"
}


# Check for memory options and calculate a sane default if not given
memory_opts() {
  # Check whether -Xmx is already given in JAVA_OPTIONS. Then we don't do anything here
  if echo "${JAVA_OPTIONS}" | grep -q -- "-Xmx"; then
    return
  fi
  # Check if explicitly disabled
  if [ "x$JAVA_MAX_MEM_RATIO" = "x0" ]; then
    return
  fi

  # Check for the 'real memory size' and calculate mx from that minus a "reserved" (system/jvm) amount
  if [ "x$CONTAINER_RESERVED_MEMORY" != x ]; then
    local max_mem="${CONTAINER_RESERVED_MEMORY}"
    local system_reserved=${JAVA_RESERVED_MEM:-128}
    local mx=$(echo "${max_mem} ${ratio} 1048576" | awk '{printf "%d\n" , ($1*$2)/100 -$3 + 0.5}')
    echo "-Xmx${mx}m"

    # set initial heap to be same as max -- no need to have a wiggle room
    echo "-Xms${mx}m"

    generation_tuning $mx
  fi

  # stack size
  if echo "${JAVA_OPTIONS}" | grep -q -- "-Xss"; then
    return
  fi
  echo "-Xss512k"
}


# Switch on diagnostics except when switched off
diagnostics() {
  if [ "x$JAVA_DIAGNOSTICS" != "x" ]; then
    echo "-XX:NativeMemoryTracking=summary -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UnlockDiagnosticVMOptions"
  fi
}


# RMI-based JMX -- stock impl.
default_jmx() {
  if [ "x$ADMIN_PORT" != "x" ]; then
    local host
    if [ -z "$AWS_REGION" ] ; then
      host="0.0.0.0"
    else
      host=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`
    fi
    echo "-Dcom.sun.management.jmxremote.port=$ADMIN_PORT
          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=$host
          -Dcom.sun.management.jmxremote.rmi.port=$ADMIN_PORT"
  fi
}


cpu_core_tunning() {
  local core_limit="${JAVA_CORE_LIMIT}"
  if [ "x$core_limit" = "x0" ]; then
    return
  fi

  if [ "x$CONTAINER_CORE_LIMIT" != x ]; then
    if [ "x$core_limit" = x ]; then
      core_limit="${CONTAINER_CORE_LIMIT}"
    fi
    echo "-XX:ParallelGCThreads=${core_limit} " \
         "-XX:ConcGCThreads=${core_limit} " \
         "-Djava.util.concurrent.ForkJoinPool.common.parallelism=${core_limit}"
  fi
}


# Echo options, trimming trailing and multiple spaces
echo "$(memory_opts) $(cpu_core_tunning) $(diagnostics) $(default_jmx)" | awk '$1=$1'
